input {
  # Syslog input for Docker logs
  tcp {
    port => 5000
    codec => json_lines
  }
}

filter {
  # Parse JSON logs if present in message field
  if [message] =~ /^\{.*\}$/ {
    json {
      source => "message"
      target => "parsed"
      skip_on_invalid_json => true
    }
    
    # If JSON parsing succeeded, promote fields to root
    if [parsed] {
      ruby {
        code => "
          parsed = event.get('parsed')
          if parsed.is_a?(Hash)
            parsed.each { |k, v| event.set(k, v) }
          end
        "
      }
      mutate {
        remove_field => ["parsed"]
      }
    }
  }

  # Extract service name from syslog tag
  if [tag] {
    mutate {
      add_field => { "service" => "%{tag}" }
    }
  }
  
  # Add service metadata based on service name
  if [service] == "frontend" {
    mutate {
      add_field => {
        "service_type" => "web"
        "app_component" => "ui"
      }
      add_tag => [ "frontend", "web", "ui" ]
    }
  } else if [service] == "backend" {
    mutate {
      add_field => {
        "service_type" => "api"
        "app_component" => "server"
      }
      add_tag => [ "backend", "api", "server" ]
    }
  }

  # Extract log level from message
  grok {
    match => { "message" => "(?i)\b(?<log_level>DEBUG|INFO|WARN|WARNING|ERROR|FATAL|TRACE)\b" }
    tag_on_failure => []
  }

  # Normalize log level to uppercase
  if [log_level] {
    mutate {
      uppercase => [ "log_level" ]
    }
  }

  # Extract HTTP status codes if present
  grok {
    match => { "message" => "\b(?<http_status>[1-5][0-9]{2})\b" }
    tag_on_failure => []
  }

  # Parse timestamp if present in the log
  if [timestamp] {
    date {
      match => [ "timestamp", "ISO8601", "yyyy-MM-dd HH:mm:ss", "yyyy-MM-dd'T'HH:mm:ss.SSSZ" ]
      target => "@timestamp"
      tag_on_failure => ["_dateparsefailure"]
    }
  }

  # Add environment info
  mutate {
    add_field => {
      "environment" => "development"
      "log.source" => "docker-syslog"
    }
  }

  # Clean up unnecessary fields
  mutate {
    remove_field => [ "agent", "ecs", "input", "host" ]
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "ft_transcendence-%{+YYYY.MM.dd}"
    document_type => "_doc"
  }
  
  # Uncomment for debugging:
  # stdout { codec => rubydebug }
}