input {
  beats {
    port => 5044
  }
}

filter {
  # Parse JSON logs if present
  if [message] =~ /^\{.*\}$/ {
    json {
      source => "message"
      skip_on_invalid_json => true
    }
  }

  # Extract service name from container labels (with proper field path)
  if [container][labels][service_name] {
    mutate {
      add_field => { "service" => "%{[container][labels][service_name]}" }
    }
  } else if [container][labels][service.name] {
    mutate {
      add_field => { "service" => "%{[container][labels][service.name]}" }
    }
  } else if [container][name] =~ /frontend/ {
    mutate {
      add_field => { "service" => "frontend" }
    }
  } else if [container][name] =~ /backend/ {
    mutate {
      add_field => { "service" => "backend" }
    }
  }

  # Add service type from labels
  if [container][labels][service_type] {
    mutate {
      add_field => { "service_type" => "%{[container][labels][service_type]}" }
    }
  } else if [container][labels][service.type] {
    mutate {
      add_field => { "service_type" => "%{[container][labels][service.type]}" }
    }
  }

  # Add app component from labels
  if [container][labels][app_component] {
    mutate {
      add_field => { "app_component" => "%{[container][labels][app_component]}" }
    }
  } else if [container][labels][app.component] {
    mutate {
      add_field => { "app_component" => "%{[container][labels][app.component]}" }
    }
  }

  # Extract log level from message
  grok {
    match => { "message" => "(?i)\b(?<log_level>DEBUG|INFO|WARN|WARNING|ERROR|FATAL|TRACE)\b" }
    tag_on_failure => []
  }

  # Normalize log level to uppercase
  if [log_level] {
    mutate {
      uppercase => [ "log_level" ]
    }
  }

  # Tag based on service for easy filtering
  if [service] == "frontend" {
    mutate {
      add_tag => [ "frontend", "web", "ui" ]
    }
  } else if [service] == "backend" {
    mutate {
      add_tag => [ "backend", "api", "server" ]
    }
  }

  # Extract HTTP status codes if present
  grok {
    match => { "message" => "\b(?<http_status>[1-5][0-9]{2})\b" }
    tag_on_failure => []
  }

  # Clean up unnecessary fields to reduce noise
  mutate {
    remove_field => [ "agent", "ecs", "input" ]
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "ft_transcendence-%{+YYYY.MM.dd}"
  }
  
  # Uncomment for debugging:
  # stdout { codec => rubydebug }
}
